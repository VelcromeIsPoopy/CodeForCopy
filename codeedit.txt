public class TicTacToe
{
   //copy over your constructor from the Tic Tac Toe Board activity in the previous lesson!
    private int turn;
    private String[][] board = {{"-","-","-"," "},{"-","-","-"," "},{"-","-","-"," "}};
   
   //this method returns the current turn
   public int getTurn()
   {
        return this.turn;
   }
   
   /*This method prints out the board array on to the console
   */
    public void printBoard()
    {
        System.out.println("  0 1 2");
        for (int i = 0; i < board.length; i++)
        {
            System.out.println(i + " " + this.board[i][0] + " " + this.board[i][1] + " "+ this.board[i][2] + "" + this.board[i][3]);
        }
    }
   
   //This method returns true if space row, col is a valid space
   public boolean pickLocation(int row, int col)
   {
        if(board[row][col].equals("-"))
        {
            return true;
        }
        return false;
   }
   
   //This method places an X or O at location row,col based on the int turn
   public void takeTurn(int row, int col)
   {
        if(turn % 2 == 0)
        {
            board[row][col] = "X";
        } else {
            board[row][col] = "O";
        }
        turn++;
       
   }
   
   //This method returns a boolean that returns true if a row has three X or O's in a row
   public boolean checkRow()
   {
        boolean win = false;
        for(int i = 0; i < board.length; i++)
        {
       if(!board[i][0].equals("-"))
       {
       if(board[i][0].equals(board[i][1]) && board[i][0].equals(board[i][2]))
                {
                    win = true;
                }
       }
        }
        return win;

    }
   
    //This method returns a boolean that returns true if a col has three X or O's
   public boolean checkCol()
   {
        boolean win = false;
        for(int i = 0; i < board.length; i++)
        {
       if(!board[0][i].equals("-"))
       {
       if(board[0][i].equals(board[1][i]) && board[0][i].equals(board[2][i]))
                {
                    win = true;
                }
       }
        }
        return win;
   }
   
    //This method returns a boolean that returns true if either diagonal has three X or O's
   public boolean checkDiag()
   {
       boolean win = false;
        for(int i = 0; i < board.length; i++)
        {
       if(!board[0][i].equals("-"))
       {
       if(board[0][0].equals(board[1][1]) && board[1][1].equals(board[2][2]))
                {
                    win = true;
                }
       }
        }
        return win;
   }
   
   //This method returns a boolean that checks if someone has won the game
   public boolean checkWin()
   {
       return (checkCol() || checkRow() || checkDiag());
   }

}
